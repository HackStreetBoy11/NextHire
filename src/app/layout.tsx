import type { Metadata } from "next";
import localFont from "next/font/local";
import ConvexClerkProvider from "../components/providers/ConvexClerkProvider";
import Navbar from "@/components/Navbar";
import "@stream-io/video-react-sdk/dist/css/styles.css";
import "./globals.css";
import { ThemeProvider } from "next-themes";
import { RedirectToSignIn, SignedIn, SignedOut } from "@clerk/nextjs";
import { Toaster } from "react-hot-toast";

/*
  MetaData -> next.js type for setting the HTML<head> meta info
  localfont -> allows you to lead custom local fonts and expose css variables
  convexClerkProvider -> wraps your app to provide both convex client and clerk auth context.
  Navbar -> global navigation bar component
  @stream-io/video-react-sdk/dist/css/styles.css -> styles for your video calls (stream vido sdk)
  ./globals.css ->global css for your app.
  ThemeProvider -> manages light/dark theme swithching using next-themes
  RedirectToSignIn, SignedIn, SignedOut ->clerk components for auth-aware rendering.
  Toaster -> for showing toast notification
*/

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

/*
  Loads GeistSans and GeistMono fonts locally
  variable ->defines a css variable you can use in classname
  weight-> defines the font weights to load.
  These fonts are used globally in your layout.
*/
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
/*  
  Provides HTML <titles> and <meta name="description"> for SEO.
  can be updated dynamically if needed
*/
export default function RootLayout({
  // RootLayout wraps your entire app.
  // Receive children (any page or component renderd inside this layout)
  // using readonly ensures props aren't mutated insided the layout/
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ConvexClerkProvider>
      {/* 
        wraps the app so every component can access 
            convex client (queries ,mutation)
            clerk auth (current user, signIn, signOut)
      */}
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {/* 
            supperssHydrationWarning -> avoids React warning when server and client render differently
            className applies global font css varible and antialised for smoother text rendering
          */}
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {/* 
              Manages light/dark Mode
              attribute="class"-> toggles class="light"/class="dark" on <html>
              defaultTheme="system" -> follows user os perfernces
              disableTransitionONchange ->prevents visual flicker when switching themes.
            */}

            <SignedIn>

              <div className="min-h-screen">
                <Navbar />
                <main className="px-4 sm:px-6 lg:px-8">{children}</main>
              </div>
            </SignedIn>

            <SignedOut>
              <RedirectToSignIn />
            </SignedOut>

            {/* 
              Signedin -> content visible only when user is logged in
              signedOut -> automatically redirects user to clerk sign-In page if not logged in.
              This ensures your app is fully protected and pages can't be accessed by unauthorized users.
            */}

          </ThemeProvider>
          <Toaster />
        </body>
      </html>
    </ConvexClerkProvider>
  );
}
